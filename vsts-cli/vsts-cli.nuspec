<?xml version="1.0" encoding="utf-8"?>
<!-- Read this before creating packages: https://chocolatey.org/docs/create-packages -->
<!-- It is especially important to read the above link to understand additional requirements when publishing packages to the community feed aka dot org (https://chocolatey.org/packages). -->
<!-- Test your packages in a test environment: https://github.com/chocolatey/chocolatey-test-environment -->

<!--
This is a nuspec. It mostly adheres to https://docs.nuget.org/create/Nuspec-Reference. Chocolatey uses a special version of NuGet.Core that allows us to do more than was initially possible. As such there are certain things to be aware of:

* the package xmlns schema url may cause issues with nuget.exe
* Any of the following elements can ONLY be used by choco tools - projectSourceUrl, docsUrl, mailingListUrl, bugTrackerUrl, packageSourceUrl, provides, conflicts, replaces 
* nuget.exe can still install packages with those elements but they are ignored. Any authoring tools or commands will error on those elements 
-->
<!-- You can embed software files directly into packages, as long as you are not bound by distribution rights. -->
<!-- * If you are an organization making private packages, you probably have no issues here -->
<!-- * If you are releasing to the community feed, you need to consider distribution rights. -->
<!-- Do not remove this test for UTF-8: if “Ω” doesn’t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->

<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <!-- == PACKAGE SPECIFIC SECTION == -->
    <!-- This section is about this package, although id and version have ties back to the software -->
    <!-- id is lowercase and if you want a good separator for words, use '-', not '.'. Dots are only acceptable as suffixes for certain types of packages, e.g. .install, .portable, .extension, .template -->
    <!-- If the software is cross-platform, attempt to use the same id as the debian/rpm package(s) if possible. -->
    <id>vsts-cli</id>
    <!-- version should MATCH as closely as possible with the underlying software -->
    <!-- Is the version a prerelease of a version? https://docs.nuget.org/create/versioning#creating-prerelease-packages -->
    <!-- Note that unstable versions like 0.0.1 can be considered a released version, but it's possible that one can release a 0.0.1-beta before you release a 0.0.1 version. If the version number is final, that is considered a released version and not a prerelease. -->
    <version>0.1.0</version>
    <packageSourceUrl>https://github.com/flcdrg/au-packages/tree/master/vsts-cli</packageSourceUrl>
    <!-- owners is a poor name for maintainers of the package. It sticks around by this name for compatibility reasons. It basically means you. -->
    <owners>flcdrg</owners>
    <!-- ============================== -->

    <!-- == SOFTWARE SPECIFIC SECTION == -->
    <!-- This section is about the software itself -->
    <title>VSTS CLI (Install)</title>
    <authors>Microsoft Corporation</authors>
    <projectUrl>https://docs.microsoft.com/en-us/cli/vsts/overview?view=vsts-cli-latest</projectUrl>
    <!--<iconUrl>http://cdn.rawgit.com/__MAINTAINER_REPO__/master/icons/vsts-cli.png</iconUrl>-->
    <!-- copyright is usually years and software vendor, but not required for internal feeds -->
    <copyright>2017</copyright>
    <licenseUrl>https://aka.ms/vsts-cli-eula</licenseUrl>
    <requireLicenseAcceptance>true</requireLicenseAcceptance>
    <projectSourceUrl>https://github.com/Microsoft/vsts-cli</projectSourceUrl>
    <docsUrl>https://docs.microsoft.com/en-us/cli/vsts/get-started?view=vsts-cli-latest</docsUrl>
    <mailingListUrl>https://developercommunity.visualstudio.com/spaces/21/index.html?page=1&pageSize=15&sort=votes</mailingListUrl>
    <bugTrackerUrl>https://github.com/Microsoft/vsts-cli/issues</bugTrackerUrl>
    <tags>VSTS Git TFS</tags>
    <summary>VSTS CLI is a command line interface for Visual Studio Team Services (VSTS) and Team Foundation Server (TFS)</summary>
    <description>VSTS CLI is Visual Studio Team Services (VSTS) new command line experience for managing VSTS resources. You can install it on macOS, Linux, and Windows and run it from the command line.

VSTS CLI is optimized for managing and administering VSTS resources from the command line, and for building automation scripts that work against your VSTS or Team Foundation Server account. This article helps get you started using it, and teaches you the core concepts behind it.

VSTS CLI is supported on Team Foundation Server 2017 update 2 and later.</description>
    <releaseNotes>This is the preview release of VSTS CLI. Preview applies to these command modules:

    Build (commands to work with and manage Visual Studio Team Services builds.)
    Code (commands to work with and manage Visual Studio Team Services code repositories.)
    Project (commands to work with and manage Visual Studio Team Services team projects.)
    Work (commands to work with and manage Visual Studio Team Services work items.)

These command modules can be used in production and are supported by standard Microsoft SLA. You can ask questions and report issues on the VSTS developer community website using the vsts-cli tag. You can provide feedback from the command line with the vsts feedback command.

The commands in these modules are stable and the syntax is not expected to change in upcoming releases of this version of VSTS CLI.</releaseNotes>
    <!-- =============================== -->  

    <!-- Specifying dependencies and version ranges? https://docs.nuget.org/create/versioning#specifying-version-ranges-in-.nuspec-files -->
    <!--<dependencies>
      <dependency id="" version="__MINIMUM_VERSION__" />
      <dependency id="" version="[__EXACT_VERSION__]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_INCLUSIVE]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_EXCLUSIVE)" />
      <dependency id="" />
      <dependency id="chocolatey-core.extension" version="1.1.0" />
    </dependencies>-->
    <!-- chocolatey-core.extension - https://chocolatey.org/packages/chocolatey-core.extension
         - You want to use Get-UninstallRegistryKey on less than 0.9.10 (in chocolateyUninstall.ps1)
         - You want to use Get-PackageParameters and on less than 0.11.0
         - You want to take advantage of other functions in the core community maintainer's team extension package
         - You can download this extension and host it locally with choco download chocolatey-core.extension --source https://chocolatey.org/api/v2/
    -->

    <!--<provides>NOT YET IMPLEMENTED</provides>-->
    <!--<conflicts>NOT YET IMPLEMENTED</conflicts>-->
    <!--<replaces>NOT YET IMPLEMENTED</replaces>-->
  </metadata>
  <!-- this section controls what actually gets packaged into the Chocolatey package -->
  <!-- Uncomment to limit what is packed in -->
  <!--<files>
    <file src="tools\**" target="tools" />
  </files>-->
</package>
